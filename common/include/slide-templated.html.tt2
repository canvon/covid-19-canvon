<!DOCTYPE html>
<html lang="en">
[% BLOCK changed_plot_basename;
  plot_filename = plot_prefix _ plot_basename _ plot_suffix;
  plot_basename_human = plot_basename.replace('_', ' ').replace('-', ' - ');
END -%]
  <!-- Based on the "Starter template" from https://getbootstrap.com/docs/4.4/getting-started/introduction/ -->
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <style>
      /* Make control arrows black, or "visible on white-background image".
       * Thanks to: https://stackoverflow.com/questions/46249541/change-arrow-colors-in-bootstraps-carousel#answer-53359424
       */
      .carousel-control-prev,
      .carousel-control-next {
        filter: invert(100%);
      }

      @media (orientation: landscape) {
        .carousel-item img {
          height: 85vh;
          width: auto !important;
          margin-left: auto;
          margin-right: auto;
        }
      }

      /* The carousel navigation buttons (left/right) go through the full height
       * of the slide (but only left 15%, right 15%; which is 30% of the width),
       * so avoid putting tappable/clickable content behind them. (width: 70%)
       */
      .carousel-item h5,
      .carousel-item p {
        width: 70%;
        margin-left: auto;
        margin-right: auto;
        /* text-align: center; <- Doesn't look good, but note that we tried it. */

        /* Have a little bit of space between (invisible) navigation button
         * clickable area and the non-image part of the slide, to help the user
         * avoid activating the wrong thing...
         */
        padding-left: 1em;
        padding-right: 1em;
      }

      /* Avoid plot "jumping" when switching to slide with more/less
       * lines of heading. Ellipsise too long line, unless hovered/tapped.
       */
      .carousel-item h5 {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: /* ellipsis */ 'â€¦ (tap)';
      }
      .carousel-item h5:hover {
        white-space: normal;
      }


      /* Help the user identify the target (e.g., of the link they clicked
       * before) to which the page's URL now points. Should highlight the
       * selected list item against the other list items, for example.
       */
      :target {
        font-weight: bold;
      }
    </style>

    <title>[% data_source_short | html %] [% data_date | html %] - Covid-19 canvon rendering</title>
  </head>
  <body>
    <div class="container">
      <h1>Covid-19 canvon rendering</h1>
      <h2>[% data_source_short | html %] [% data_date | html %]</h2>

      <p>Plots based on data from <em>[% data_source | html %]</em> about the progression of <strong>Covid-19</strong> (<em>Corona Virus Disease started 2019</em>, see <a href="https://en.wikipedia.org/wiki/Coronavirus_disease_2019">Wikipedia</a>.)<br>
        Data as of <strong>[% data_date | html %]</strong>, (but see graphs for details).<br>
        This is plot run <em>[% plot_run | html %]</em>.</p>

      <div class="row">
        <div class="col border border-light rounded bg-light p-3">

          <div id="plotsCarousel" class="carousel slide" data-interval="0" data-ride="carousel">
            <div class="carousel-inner">
[% FOREACH plot_basename = plot_basenames -%]
[% PROCESS changed_plot_basename -%]
              <div class="carousel-item[% IF loop.index == 0; ' active'; END %]">
                <h5>([% loop.count %]/[% loop.size %]) Plot [% plot_basename_human | html %]:</h5>
                <img src="[% plot_filename | uri %]" class="d-block w-100">
                <p>
                  [<a href="#plotsList" role="button">Full&nbsp;list</a>].
                  [<a href="#plotsList-[% loop.count %]" role="button">List&nbsp;entry</a>],
                  [<a href="[% plot_filename | uri %]">file</a>]
                  for plot [% plot_basename_human | html %].
                </p>
              </div>
[% END -%]
            </div>

            <a class="carousel-control-prev" href="#plotsCarousel" role="button" data-slide="prev">
              <span class="carousel-control-prev-icon" aria-hidden="true"></span>
              <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#plotsCarousel" role="button" data-slide="next">
              <span class="carousel-control-next-icon" aria-hidden="true"></span>
              <span class="sr-only">Next</span>
            </a>
          </div>
[% IF data_source_linking.defined -%]

          <div class="pt-3">
            Public data from [% data_source | html %] collected from: <a href="[% data_source_linking | url %]">[% data_source_linking | html %]</a>
          </div>
[% END -%]
[% IF !canvon_rendering_linking.defined; canvon_rendering_linking = 'https://github.com/canvon/covid-19-canvon'; END -%]
[% IF canvon_rendering_linking -%]

          <div class="pt-3">
            canvon rendering from: <a href="[% canvon_rendering_linking | url %]">[% canvon_rendering_linking | html %]</a>
          </div>
[% END -%]

        </div>
      </div>

      <div class="row mt-3">
        <div class="col border border-light rounded bg-light p-3">

          <h5 id="plotsList">Jump to a plot directly:</h5>
          <ol>
[% FOREACH plot_basename = plot_basenames -%]
[% PROCESS changed_plot_basename -%]
            <li id="plotsList-[% loop.count %]">
              Plot
              <a href="#plotsCarousel"
                onclick="updateFragment(this.getAttribute('data-slide-to')); $(this.hash)[0].scrollIntoView()"
                role="button" data-slide-to="[% loop.index %]">[% plot_basename_human | html %]</a>
              [<a href="[% plot_filename | uri %]">file</a>]
            </li>
[% END -%]
          </ol>

        </div>
      </div>

      <div class="row mt-3">
        <div class="col border border-light rounded bg-light p-3">

          <h5>Jump to elsewhere:</h5>
          <ul>
            <li><a href="..">Parent directory</a></li>
            <li><a href="/">Top of the site</a></li>
          </ul>

        </div>
      </div>

    </div>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>

    <script>
      function runFragmentSlideIndex(args) {
        if (args.length != 2) {
          return
        }
        var slideStr = args[1]
        if (!(slideStr.length > 0)) {
          return
        }

        var slide = parseInt(slideStr)
        if (isNaN(slide) || !(slide >= 0)) {
          return
        }

        // Actually run slide.
        $('#plotsCarousel').carousel(slide)
      }

      function runFragmentSlideNum(args) {
        if (args.length != 2) {
          return
        }
        var slideNumStr = args[1]
        if (!(slideNumStr.length > 0)) {
          return
        }

        var slideNum = parseInt(slideNumStr)
        if (isNaN(slideNum) || !(slideNum >= 1)) {
          return
        }
        var slide = slideNum - 1

        // Actually run slide.
        $('#plotsCarousel').carousel(slide)
      }

      function runFragment(hash) {
        if (hash.length == 0) {
          return
        }
        var frag = hash.substr(1)

        var args = frag.split('=', 2)
        if (args.length != 2) {
          return
        }

        var what = args[0]
        if (what === 'slideIndex') {
          runFragmentSlideIndex(args)
        }
        else if (what === 'slideNum') {
          runFragmentSlideNum(args)
        }
      }

      function updateFragment(slideIndex) {
        // Note: document.location (is supposed to be read-only and)
        //   breaks on Firefox mobile... window.location seems to work.
        var loc = window.location
        var hash = loc.hash
        var updater = function(url) { loc.assign(url) }
        if (hash.length == 0 ||
            hash === '#' ||
            hash === '#plotsCarousel' ||
            hash.startsWith('#slideIndex=') ||
            hash.startsWith('#slideNum='))
        {
          // Avoid using Location.assign(), as that bloats the back button history...
          updater = function(url) { loc.replace(url) }
        }

        // (Stop using slideIndex, in favour of slideNum.)
        //var updatedHash = '#slideIndex=' + slideIndex.toString()
        var slideNum = slideIndex + 1
        var updatedHash = '#slideNum=' + slideNum.toString()

        // (Ways used to update the URL hash so far.)
        //window.location.hash = updatedHash
        //window.location.replace(updatedHash)
        updater(updatedHash)
      }


      // Wire events.

      $(document).ready(function() {
        runFragment(window.location.hash)
      })

      $('#plotsCarousel').on('slide.bs.carousel', function (e) {
        updateFragment(e.to)
      })

    </script>
  </body>
</html>
